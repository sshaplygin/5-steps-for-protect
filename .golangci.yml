# Comments started with [!] are explanations of my workflow with golangci-lint.
# Another comments are real comments in my config. 

# [!] Examine the https://golangci-lint.run/usage/configuration/ to know all possibilities.
run:
  timeout: 5m
  modules-download-mode: mod
  build-tags:
    - integration # [!] If you disable code for integration tests to run all unit tests, enable it to lint all the same. 
  
# [!] Linters are enabled manually. Disabled linters are commented and have comment about reason of disabling.
# [!] Linters disabled inside source code by //nolint should be specific and comments like this
# [!] //nolint:gocyclo // This legacy function is complex but the team too busy to simplify it.
# [!] (see also nolintlint settings).
#
# [!] During update version of golangci-lint do the following:
# [!] - add new linters to enable-list
# [!] - enable previously disabled linters if needed
# [!] - configure (see below) or disable new linters to be appropriate for your project
linters:
  disable-all: true
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    # - cyclop
      # Measuring code complexity is hard. Cyclomatic complexity is doubtfully
      # a reliable metric for this purpose. Some problems are complex by nature
      # and therefore more cyclomatically complex code might actually be
      # simpler.
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errname
    - errcheck
    - errorlint
    - exhaustive
    # - exhaustivestruct
      # We frequently make use of zero-values and partial initialization.
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    # - godox
      # TODOs and FIXMEs function as a big warning sign: "Beware! This code has
      # bugs and other problems. Be careful not to make things worse when
      # editing. Or better fix the issues before implementing a new feature on
      # top.". The idea of [`godox` comment
      # extractor](https://github.com/766b/godox) seems to be different from
      # the idea of [`godox` linter](https://github.com/matoous/godox). The
      # first one lets you quickly browse through the code problems, while the
      # second one asks you to remove that big warning sign in favor of tasks.
      # Though tasks are great, they will not help you while editing.
    - err113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    # - golint # Replaced by `revive`.
    - mnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - importas
    # - ireturn # See: https://github.com/go-proverbs/go-proverbs.github.io/issues/37.
    - ineffassign
    # - interfacer # Is prone to bad suggestions (officialy deprecated).
    - lll
    # - maligned # Replaced by `govet`'s `fieldalignment`
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilnil # Zero-value of maps, slices and channels is `nil` but useful.
    - nilerr
    # - nlreturn # Too subjective.
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    # - scopelint # Replaced by `exportloopref`.
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    # - varnamelen
      # Though the idea is idiomatic, the length is not the only thing that
      # determines whether a variable is "easy to use".
    - unused
    - wastedassign
    - whitespace
    # - wrapcheck # Is prone to bad suggestions (especially see issue #1).
    # - wsl # Too aggressive. Might be useful if it could do auto fix.

# [!] Linters has a lot of settings and can be flexible configured.
linters-settings:
  lll:
    line-length: 110
  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/org/project) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled
  forbidigo: # [!] Useful to check some code writing rules. E.g. this config contains example of using own logger instead of gloabl zap.
    forbid:
      - zap # we use our own logger that wraps zap.
      - os.Exit # it's not safe to exit in random places, because defer will not work.
      - log.Fatal.* # it calls os.Exit (see above)
      # - c.viper # forbid it after full migrate to new declarative configs (see PLFM-616).
  nilnil:
    checked-types: # [!] choose only types relative to your code base or disable this linter.
      - ptr
      - func
      - iface
  nolintlint:
    require-explanation: true # [!] it forces you to write explantion of //nolint comments.
    require-specific: true
  tagliatelle: # [!] configure it accordingly to your project rules.
    case:
      use-field-name: false
      rules:
        json: snake
        yaml: snake
  gocritic:
    # Enable all checks.
    # Default: false
    enable-all: true
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.com/overview.
    settings:
      # Must be valid enabled check name.
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      commentedOutCode:
        # Min length of the comment that triggers a warning.
        # Default: 15
        minLength: 50
      elseif:
        # Whether to skip balanced if-else pairs.
        # Default: true
        skipBalanced: false
      hugeParam:
        # Size in bytes that makes the warning trigger.
        # Default: 80
        sizeThreshold: 70
      ifElseChain:
        # Min number of if-else blocks that makes the warning trigger.
        # Default: 2
        minThreshold: 4
      nestingReduce:
        # Min number of statements inside a branch to trigger a warning.
        # Default: 5
        bodyWidth: 4
      rangeExprCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 512
        sizeThreshold: 516
        # Whether to check test functions
        # Default: true
        skipTestFuncs: false
      rangeValCopy:
        # Size in bytes that makes the warning trigger.
        # Default: 128
        sizeThreshold: 32
        # Whether to check test functions.
        # Default: true
        skipTestFuncs: false
      ruleguard:
        # Enable debug to identify which 'Where' condition was rejected.
        # The value of the parameter is the name of a function in a ruleguard file.
        #
        # When a rule is evaluated:
        # If:
        #   The Match() clause is accepted; and
        #   One of the conditions in the Where() clause is rejected,
        # Then:
        #   ruleguard prints the specific Where() condition that was rejected.
        #
        # The option is passed to the ruleguard 'debug-group' argument.
        # Default: ""
        debug: 'emptyDecl'
        # Determines the behavior when an error occurs while parsing ruleguard files.
        # If flag is not set, log error and skip rule files that contain an error.
        # If flag is set, the value must be a comma-separated list of error conditions.
        # - 'all':    fail on all errors.
        # - 'import': ruleguard rule imports a package that cannot be found.
        # - 'dsl':    gorule file does not comply with the ruleguard DSL.
        # Default: ""
        failOn: dsl,import
        # Comma-separated list of file paths containing ruleguard rules.
        # If a path is relative, it is relative to the directory where the golangci-lint command is executed.
        # The special '${configDir}' variable is substituted with the absolute directory containing the golangci config file.
        # Glob patterns such as 'rules-*.go' may be specified.
        # Default: ""
        rules: '${configDir}/ruleguard/rules-*.go,${configDir}/myrule1.go'
        # Comma-separated list of enabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: "<all>"
        enable: "myGroupName,#myTagName"
        # Comma-separated list of disabled groups or skip empty to enable everything.
        # Tags can be defined with # character prefix.
        # Default: ""
        disable: "myGroupName,#myTagName"
      tooManyResultsChecker:
        # Maximum number of results.
        # Default: 5
        maxResults: 10
      truncateCmp:
        # Whether to skip int/uint/uintptr types.
        # Default: true
        skipArchDependent: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false
      unnamedResult:
        # Whether to check exported functions.
        # Default: false
        checkExported: true

# [!] Extremly useful section to disable some linters.
issues:
  exclude-dirs:
    - go/pkg/mod/
  exclude-rules:
    - path: (_test\.go|apitest)
      linters:
        - forcetypeassert # it's ok to have some type risks in tests
        - gosec # security is not make sense in tests
        - noctx # it's ok to do simple http request without context in tests

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

    # They are using same environment
    - path: tests/integration
      linters:
        - paralleltest

    # Init and New functions is a glue for service. They can be long, but simple.
    - linters:
        - funlen
      path: service\.go
      source: "Init|New"

    # We allow to use zap only in log package.
    - path: internal/log
      linters:
        - forbidigo
      text: "use of .* forbidden by pattern `zap`"

    # We allow to log.Fatal in main, tests, scripts and generators.
    - path: main.go|main_test.go|tests|scripts|internal/blueprint/generator/generator.go|build/dockergen.go
      linters:
        - forbidigo
      text: "forbidden by pattern `log.Fatal.*`"

    # We allow to os.Exit in main, tests, scripts and generators.
    - path: main.go|main_test.go|tests|scripts|internal/blueprint/generator/generator.go|build/dockergen.go
      linters:
        - forbidigo
      text: "forbidden by pattern `os.Exit`"

    # We have a lot of nil-tolerant types here.
    - path: <package with a lot of nil-tolerant types>
      linters:
        - nilnil

    # Should be fixed after full migration to generated config PLFM-616.
    - path: config.go
      linters:
        - unparam
      text: "newConfig - result 1 \\(error\\) is always nil"